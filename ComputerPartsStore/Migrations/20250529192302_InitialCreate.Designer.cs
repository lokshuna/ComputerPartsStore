// <auto-generated />
using System;
using ComputerPartsStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComputerPartsStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250529192302_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ComputerPartsStore.Models.Accessories", b =>
                {
                    b.Property<int>("Accessory_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accessory_Availability")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Accessory_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<float>("Accessory_Price")
                        .HasColumnType("float");

                    b.Property<int>("Catalog_id")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Accessory_id");

                    b.HasIndex("Catalog_id");

                    b.ToTable("Accessories");

                    b.HasData(
                        new
                        {
                            Accessory_id = 1,
                            Accessory_Availability = "В наявності",
                            Accessory_Name = "Intel Core i7-12700K",
                            Accessory_Price = 12000f,
                            Catalog_id = 1,
                            Specifications = "12 ядер, 3.6-5.0 GHz, LGA1700"
                        },
                        new
                        {
                            Accessory_id = 2,
                            Accessory_Availability = "В наявності",
                            Accessory_Name = "AMD Ryzen 7 5800X",
                            Accessory_Price = 10500f,
                            Catalog_id = 1,
                            Specifications = "8 ядер, 3.8-4.7 GHz, AM4"
                        },
                        new
                        {
                            Accessory_id = 3,
                            Accessory_Availability = "В наявності",
                            Accessory_Name = "NVIDIA RTX 4070",
                            Accessory_Price = 23000f,
                            Catalog_id = 2,
                            Specifications = "12GB GDDR6X, 2475 MHz"
                        },
                        new
                        {
                            Accessory_id = 4,
                            Accessory_Availability = "В наявності",
                            Accessory_Name = "AMD RX 7800 XT",
                            Accessory_Price = 21000f,
                            Catalog_id = 2,
                            Specifications = "16GB GDDR6, 2565 MHz"
                        },
                        new
                        {
                            Accessory_id = 5,
                            Accessory_Availability = "В наявності",
                            Accessory_Name = "Corsair Vengeance LPX 16GB",
                            Accessory_Price = 2800f,
                            Catalog_id = 3,
                            Specifications = "DDR4-3200, 2x8GB, C16"
                        },
                        new
                        {
                            Accessory_id = 6,
                            Accessory_Availability = "В наявності",
                            Accessory_Name = "G.Skill Trident Z5 32GB",
                            Accessory_Price = 5500f,
                            Catalog_id = 3,
                            Specifications = "DDR5-6000, 2x16GB, C36"
                        });
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Address", b =>
                {
                    b.Property<int>("Address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("House_Number")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Address_id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Address_id = 1,
                            City = "Львів",
                            House_Number = 1,
                            Region = "Львівська"
                        },
                        new
                        {
                            Address_id = 2,
                            City = "Львів",
                            House_Number = 2,
                            Region = "Львівська"
                        });
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Catalog", b =>
                {
                    b.Property<int>("Catalog_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accessory_type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Catalog_id");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Catalog_id = 1,
                            Accessory_type = "Процесори"
                        },
                        new
                        {
                            Catalog_id = 2,
                            Accessory_type = "Відеокарти"
                        },
                        new
                        {
                            Catalog_id = 3,
                            Accessory_type = "Оперативна пам'ять"
                        },
                        new
                        {
                            Catalog_id = 4,
                            Accessory_type = "Материнські плати"
                        },
                        new
                        {
                            Catalog_id = 5,
                            Accessory_type = "Блоки живлення"
                        },
                        new
                        {
                            Catalog_id = 6,
                            Accessory_type = "Накопичувачі"
                        },
                        new
                        {
                            Catalog_id = 7,
                            Accessory_type = "Корпуси"
                        });
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Log", b =>
                {
                    b.Property<int>("Order_id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("User_id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Last_Change")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Order_id", "User_id");

                    b.HasIndex("User_id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_Item", b =>
                {
                    b.Property<int>("Order_id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("Accessory_id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Item_Count")
                        .HasColumnType("int");

                    b.Property<int>("Item_Price")
                        .HasColumnType("int");

                    b.HasKey("Order_id", "Accessory_id");

                    b.HasIndex("Accessory_id");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_Status", b =>
                {
                    b.Property<int>("Order_status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Order_status_id");

                    b.ToTable("Order_Statuses");

                    b.HasData(
                        new
                        {
                            Order_status_id = 1,
                            Status = "Нове"
                        },
                        new
                        {
                            Order_status_id = 2,
                            Status = "Прийняте"
                        },
                        new
                        {
                            Order_status_id = 3,
                            Status = "Формується"
                        },
                        new
                        {
                            Order_status_id = 4,
                            Status = "Сформоване"
                        },
                        new
                        {
                            Order_status_id = 5,
                            Status = "Доставляється"
                        },
                        new
                        {
                            Order_status_id = 6,
                            Status = "Доставлене"
                        },
                        new
                        {
                            Order_status_id = 7,
                            Status = "Скасоване"
                        });
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_list", b =>
                {
                    b.Property<int>("Order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order_status_id")
                        .HasColumnType("int");

                    b.Property<int>("Overlay_id")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Order_id");

                    b.HasIndex("Customer_id");

                    b.HasIndex("Order_status_id");

                    b.ToTable("Order_lists");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<long>("Phone_Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Second_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("User_login")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("User_id");

                    b.HasIndex("Address_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            User_id = 1,
                            Address_id = 1,
                            Name = "Оксана",
                            Patronymic = "Петрівна",
                            Phone_Number = 380671234567L,
                            Role_Name = "Operator",
                            Second_Name = "Операторівна",
                            User_login = "operator",
                            User_password = "operator123"
                        },
                        new
                        {
                            User_id = 2,
                            Address_id = 2,
                            Name = "Микола",
                            Patronymic = "Іванович",
                            Phone_Number = 380671234568L,
                            Role_Name = "Storekeeper",
                            Second_Name = "Комірник",
                            User_login = "storekeeper",
                            User_password = "store123"
                        });
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Accessories", b =>
                {
                    b.HasOne("ComputerPartsStore.Models.Catalog", "Catalog")
                        .WithMany("Accessories")
                        .HasForeignKey("Catalog_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Log", b =>
                {
                    b.HasOne("ComputerPartsStore.Models.Order_list", "Order_list")
                        .WithMany("Logs")
                        .HasForeignKey("Order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerPartsStore.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order_list");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_Item", b =>
                {
                    b.HasOne("ComputerPartsStore.Models.Accessories", "Accessories")
                        .WithMany("Order_Items")
                        .HasForeignKey("Accessory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerPartsStore.Models.Order_list", "Order_list")
                        .WithMany("Order_Items")
                        .HasForeignKey("Order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("Order_list");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_list", b =>
                {
                    b.HasOne("ComputerPartsStore.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerPartsStore.Models.Order_Status", "Order_Status")
                        .WithMany("Order_lists")
                        .HasForeignKey("Order_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order_Status");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.User", b =>
                {
                    b.HasOne("ComputerPartsStore.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("Address_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Accessories", b =>
                {
                    b.Navigation("Order_Items");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Catalog", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_Status", b =>
                {
                    b.Navigation("Order_lists");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.Order_list", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Order_Items");
                });

            modelBuilder.Entity("ComputerPartsStore.Models.User", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
